(function () {
	'use strict';

	function Ces() {
	  var ces = {
	    knownTags: {},
	    LAST_E_ID: 0,

	    newEntity: function newEntity(props) {
	      return Entity$1(ces, props);
	    },
	    destroyEntity: function destroyEntity(entity) {
	      return _destroyEntity(ces, entity);
	    },
	    reset: function reset() {
	      return _reset(ces);
	    },

	    newSystem: function newSystem(action) {
	      for (var _len = arguments.length, tags = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        tags[_key - 1] = arguments[_key];
	      }

	      return System$1.apply(undefined, [ces, action].concat(tags));
	    }
	  };

	  return ces;
	}

	var Entity$1 = function Entity(ces, props) {
	  var e = props;
	  props.id = ces.LAST_E_ID++;

	  props.tags && props.tags.forEach(function (p) {
	    ces.knownTags[p] = ces.knownTags[p] || [];
	    ces.knownTags[p].push(e);
	  });

	  return e;
	};

	var System$1 = function System(ces, action) {
	  for (var _len2 = arguments.length, tags = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	    tags[_key2 - 2] = arguments[_key2];
	  }

	  return function () {
	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    var entities = tags.reduce(function (founds, t) {
	      var tagged = ces.knownTags[t];
	      tagged.forEach(function (e) {
	        if (founds[e.id]) return;
	        // Only give the entity to this system if the entity has every tag the
	        // system requires.
	        if (tags.every(function (stag) {
	          return e.tags.indexOf(stag) > -1;
	        })) {
	          founds[e.id] = e;
	        }
	      });
	      return founds;
	    }, {});

	    // pass the ...args from the invocation of the system to the action.
	    // TODO: this generates a lot of garbage due to the ...spread. It gets
	    // transpiled to:
	    // action.apply(undefined, [Object.keys(entities).map(function (id) {
	    //   return entities[id];
	    // })].concat(args));
	    // Which means at least two arrays from the apply + concat, plus another
	    // within .map. Optimize this!
	    action.apply(undefined, [Object.keys(entities).map(function (id) {
	      return entities[id];
	    })].concat(args));
	  };
	};

	var systemPropReqs = function systemPropReqs(entity) {
	  for (var _len4 = arguments.length, props = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	    props[_key4 - 1] = arguments[_key4];
	  }

	  if (undefined !== 'production') {
	    props.forEach(function (k) {
	      if (![entity[k]]) {
	        throw new Error('required system prop ' + k + ' not found in entity ' + JSON.stringify(entity));
	      }
	    });
	  }
	};

	var _destroyEntity = function _destroyEntity(ces, e) {
	  // TODO: this may need to be a "scheduleDestroyEntity"
	  e.tags.forEach(function (t) {
	    var tagged = ces.knownTags[t];
	    var idx = tagged.indexOf(e);
	    if (idx === -1) return;
	    tagged.splice(idx, 1);
	  });
	  e.tags.length = 0;
	  e.destroyed = true;
	};

	var _reset = function _reset(ces) {
	  Object.keys(ces.knownTags).forEach(function (t) {
	    var entities = ces.knownTags[t];
	    entities.forEach(_destroyEntity);
	    ces.knownTags.length = 0;
	    delete ces.knownTags[t];
	  });

	  ces.LAST_E_ID = 0;
	};

	var LAST_ID = 0;
	var tasks = [];

	var schedule = function schedule(action, delay) {
	  tasks.push({
	    id: ++LAST_ID,
	    action: action,
	    delay: delay,
	    age: 0
	  });
	};

	var tick = function tick() {
	  var dt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	  // copy the array in case some tasks need to be expunged.
	  tasks.slice().forEach(function (t, idx) {
	    t.age += dt;

	    if (t.age >= t.delay) {
	      tasks.splice(idx, 1);
	      t.action(t.delay, t.age);
	    }
	  });
	};

	// This is basically an adaptation of
	// https://github.com/IceCreamYou/MainLoop.js/blob/gh-pages/src/mainloop.js,
	// with some removals / shrinking.

	// Without a stable game loop, the game will run quite differently on older
	// computers or browsers. In one it might be way easier, since it could run
	// much slower! This helps to prevent that.

	var Loop = (function (_ref) {
	  var drawTime = _ref.drawTime,
	      updateTime = _ref.updateTime,
	      draw = _ref.draw,
	      update = _ref.update,
	      _ref$panicAt = _ref.panicAt,
	      panicAt = _ref$panicAt === undefined ? 10 : _ref$panicAt,
	      _ref$onPanic = _ref.onPanic,
	      onPanic = _ref$onPanic === undefined ? function () {} : _ref$onPanic,
	      _ref$onFPS = _ref.onFPS,
	      onFPS = _ref$onFPS === undefined ? function () {} : _ref$onFPS;


	  var perf = window.performance;

	  var drawMs = drawTime;
	  var updateMs = updateTime;
	  var pnow = perf.now.bind(perf);
	  var rAF = window.requestAnimationFrame.bind(window);

	  var accumulator = 0;
	  var raf = null;
	  var lastLoop = pnow();
	  var lastFPS = pnow();
	  var framesThisSecond = 0;
	  var fps = 0;

	  (function accumulate(now) {
	    raf = rAF(accumulate);

	    var dt = now - lastLoop;
	    accumulator += dt;
	    lastLoop = now;

	    var shouldDraw = accumulator - drawMs >= 0;
	    var step = Math.floor(accumulator / updateMs);

	    if (step >= panicAt) {
	      accumulator = 0;
	      lastLoop = pnow();
	      onPanic();
	      return;
	    }

	    while (step-- > 0) {
	      accumulator -= updateMs;
	      update(updateMs);
	    }

	    if (shouldDraw) {
	      // pass interpolation factor for smooth animations
	      draw(accumulator / drawMs);
	    }

	    framesThisSecond += 1;

	    if (lastFPS + 1000 <= now) {
	      fps = 0.25 * framesThisSecond + 0.75 * fps;
	      framesThisSecond = 0;
	      lastFPS = now;
	      onFPS(fps);
	    }
	  })(pnow());

	  var stop = function stop() {
	    if (raf) cancelAnimationFrame(raf);
	  };

	  return {
	    stop: stop
	  };
	});

	function interopDefault(ex) {
		return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var v2 = createCommonjsModule(function (module) {
	function v2(x, y) {
	  return { x: x || 0, y: y || 0 };
	}

	v2.copy = function (out, a) {
	  out.x = a.x;
	  out.y = a.y;
	  return out;
	};

	v2.set = function (out, x, y) {
	  out.x = x;
	  out.y = y;
	  return out;
	};

	v2.add = function (out, a, b) {
	  out.x = a.x + b.x;
	  out.y = a.y + b.y;
	  return out;
	};

	v2.sub = function (out, a, b) {
	  out.x = a.x - b.x;
	  out.y = a.y - b.y;
	  return out;
	};

	v2.scale = function (out, a, factor) {
	  out.x = a.x * factor;
	  out.y = a.y * factor;
	  return out;
	};

	v2.distance = function (v1, v2) {
	  var x = v1.x - v2.x;
	  var y = v1.y - v2.y;
	  return Math.sqrt(x * x + y * y);
	};

	v2.distance2 = function (v1, v2) {
	  var x = v1.x - v2.x;
	  var y = v1.y - v2.y;
	  return x * x + y * y;
	};

	v2.magnitude = function (v1) {
	  var x = v1.x;
	  var y = v1.y;
	  return Math.sqrt(x * x + y * y);
	};

	v2.normalize = function (out, a) {
	  var x = a.x;
	  var y = a.y;
	  var len = x * x + y * y;
	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out.x = a.x * len;
	    out.y = a.y * len;
	  }
	  return out;
	};

	module.exports = v2;
	});

	var v2$1 = interopDefault(v2);


	var require$$0 = Object.freeze({
	  default: v2$1
	});

	var accelerate2d = createCommonjsModule(function (module) {
	var v2 = interopDefault(require$$0);

	module.exports = function (cmp, dt) {
	  // apply acceleration to current position, convert dt to seconds
	  cmp.cpos.x += cmp.acel.x * dt * dt * 0.001;
	  cmp.cpos.y += cmp.acel.y * dt * dt * 0.001;

	  // reset acceleration
	  v2.set(cmp.acel, 0, 0);
	};
	});

	var accelerate = interopDefault(accelerate2d);

	var inertia2d = createCommonjsModule(function (module) {
	var v2 = interopDefault(require$$0);

	module.exports = function (cmp) {
	  var x = cmp.cpos.x * 2 - cmp.ppos.x,
	      y = cmp.cpos.y * 2 - cmp.ppos.y;

	  v2.set(cmp.ppos, cmp.cpos.x, cmp.cpos.y);
	  v2.set(cmp.cpos, x, y);
	};
	});

	var inertia = interopDefault(inertia2d);

	var ces = new Ces();
	var Entity = ces.newEntity;
	var System = ces.newSystem;
	var destroyEntity = ces.destroyEntity;
	// This is an "entity", aka a bag of data, with a special array named `tags`.
	// These tags mark an entity as processable by a system that has matching tags.
	// The system will only invoke its routine if an entity or entities has every
	// tag the system requires.

	var e1 = Entity({
	  tags: ['phys-no-col', 'draw-console'],
	  cpos: { x: 0, y: 0 },
	  ppos: { x: 0, y: 0 },
	  acel: { x: 10, y: 0 }
	});

	var physicsSystem = System(function (entities, dt) {
	  // entities is passed in at call time from within.
	  // dt comes from calling the system manually below.
	  entities.forEach(function (e) {
	    // this will be removed during the build due to dead-code elimination.
	    // Having this check will hopefully prevent typos during dev?
	    if (undefined !== 'production') {
	      systemPropReqs(e, 'cpos', 'ppos', 'acel');
	    }
	    accelerate(e, dt);
	    inertia(e);
	  });
	}, 'phys-no-col');

	// this should be made more specific, such as "circleDraw" or "particleDraw" and should
	// receive some sort of drawing context as param.
	var drawSystem = System(function (entities, interp) {
	  // entities is passed in at call time from within.
	  // interp comes from manually calling the system below.
	  entities.forEach(function (e) {
	    if (undefined !== 'production') {
	      systemPropReqs(e, 'cpos', 'ppos');
	    }
	    console.log('x', e.ppos.x + (e.cpos.x - e.ppos.x) * interp);
	    console.log('y', e.ppos.y + (e.cpos.y - e.ppos.y) * interp);
	  });
	}, 'draw-console');

	// schedule a callback for a specified "best effort" time in the future.
	schedule(function (scheduledDelay, actualDelay) {
	  // destroy the entity after 3500 ms
	  // TODO: may need a "destroyEntityXSystem" that deallocs any props on the
	  // entity.
	  destroyEntity(e1);
	  console.log(e1);
	}, 3500);

	var _Loop = Loop({
	  drawTime: 1000 / 60,
	  updateTime: 1000 / 30,
	  update: function update(dt) {
	    tick(dt);
	    physicsSystem(dt);
	  },
	  draw: function draw(interp) {
	    drawSystem(interp);
	  },
	  onPanic: function onPanic() {
	    return console.log('panic!');
	  },
	  onFPS: function onFPS(fps) {
	    return console.log(fps, 'fps');
	  }
	});
	var stop = _Loop.stop;
	// Turn this into dead-code during production


	if (undefined !== 'production') {
	  window.addEventListener('keydown', function (e) {
	    if (e.which === 27) {
	      stop();
	      console.log('HALT IN THE NAME OF SCIENCE');
	    }
	  }, false);
	}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbImxpYi9jZXMuanMiLCJsaWIvdGltZS5qcyIsImxpYi9sb29wLmpzIiwibm9kZV9tb2R1bGVzL3BvY2tldC1waHlzaWNzL3YyLmpzIiwibm9kZV9tb2R1bGVzL3BvY2tldC1waHlzaWNzL2FjY2VsZXJhdGUyZC5qcyIsIm5vZGVfbW9kdWxlcy9wb2NrZXQtcGh5c2ljcy9pbmVydGlhMmQuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDZXMgKCkge1xuICBjb25zdCBjZXMgPSB7XG4gICAga25vd25UYWdzOiB7fSxcbiAgICBMQVNUX0VfSUQ6IDAsXG5cbiAgICBuZXdFbnRpdHk6IChwcm9wcykgPT4gRW50aXR5KGNlcywgcHJvcHMpLFxuICAgIGRlc3Ryb3lFbnRpdHk6IChlbnRpdHkpID0+IGRlc3Ryb3lFbnRpdHkoY2VzLCBlbnRpdHkpLFxuICAgIHJlc2V0OiAoKSA9PiByZXNldChjZXMpLFxuXG4gICAgbmV3U3lzdGVtOiAoYWN0aW9uLCAuLi50YWdzKSA9PiBTeXN0ZW0oY2VzLCBhY3Rpb24sIC4uLnRhZ3MpLFxuICB9XG5cbiAgcmV0dXJuIGNlcztcbn1cblxuY29uc3QgRW50aXR5ID0gKGNlcywgcHJvcHMpID0+IHtcbiAgY29uc3QgZSA9IHByb3BzO1xuICBwcm9wcy5pZCA9IGNlcy5MQVNUX0VfSUQrKztcblxuICBwcm9wcy50YWdzICYmIHByb3BzLnRhZ3MuZm9yRWFjaChwID0+IHtcbiAgICBjZXMua25vd25UYWdzW3BdID0gY2VzLmtub3duVGFnc1twXSB8fCBbXTtcbiAgICBjZXMua25vd25UYWdzW3BdLnB1c2goZSk7XG4gIH0pO1xuXG4gIHJldHVybiBlO1xufVxuXG5jb25zdCBTeXN0ZW0gPSAoY2VzLCBhY3Rpb24sIC4uLnRhZ3MpID0+ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGVudGl0aWVzID0gdGFncy5yZWR1Y2UoKGZvdW5kcywgdCkgPT4ge1xuICAgIGNvbnN0IHRhZ2dlZCA9IGNlcy5rbm93blRhZ3NbdF07XG4gICAgdGFnZ2VkLmZvckVhY2goZSA9PiB7XG4gICAgICBpZiAoZm91bmRzW2UuaWRdKSByZXR1cm47XG4gICAgICAvLyBPbmx5IGdpdmUgdGhlIGVudGl0eSB0byB0aGlzIHN5c3RlbSBpZiB0aGUgZW50aXR5IGhhcyBldmVyeSB0YWcgdGhlXG4gICAgICAvLyBzeXN0ZW0gcmVxdWlyZXMuXG4gICAgICBpZiAodGFncy5ldmVyeShzdGFnID0+IChlLnRhZ3MuaW5kZXhPZihzdGFnKSA+IC0xKSkpIHtcbiAgICAgICAgZm91bmRzW2UuaWRdID0gZTtcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3VuZHNcbiAgfSwge30pXG5cbiAgLy8gcGFzcyB0aGUgLi4uYXJncyBmcm9tIHRoZSBpbnZvY2F0aW9uIG9mIHRoZSBzeXN0ZW0gdG8gdGhlIGFjdGlvbi5cbiAgLy8gVE9ETzogdGhpcyBnZW5lcmF0ZXMgYSBsb3Qgb2YgZ2FyYmFnZSBkdWUgdG8gdGhlIC4uLnNwcmVhZC4gSXQgZ2V0c1xuICAvLyB0cmFuc3BpbGVkIHRvOlxuICAvLyBhY3Rpb24uYXBwbHkodW5kZWZpbmVkLCBbT2JqZWN0LmtleXMoZW50aXRpZXMpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgLy8gICByZXR1cm4gZW50aXRpZXNbaWRdO1xuICAvLyB9KV0uY29uY2F0KGFyZ3MpKTtcbiAgLy8gV2hpY2ggbWVhbnMgYXQgbGVhc3QgdHdvIGFycmF5cyBmcm9tIHRoZSBhcHBseSArIGNvbmNhdCwgcGx1cyBhbm90aGVyXG4gIC8vIHdpdGhpbiAubWFwLiBPcHRpbWl6ZSB0aGlzIVxuICBhY3Rpb24oT2JqZWN0LmtleXMoZW50aXRpZXMpLm1hcChpZCA9PiBlbnRpdGllc1tpZF0pLCAuLi5hcmdzKTtcbn1cblxuZXhwb3J0IGNvbnN0IHN5c3RlbVByb3BSZXFzID0gKGVudGl0eSwgLi4ucHJvcHMpID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9wcy5mb3JFYWNoKGsgPT4ge1xuICAgICAgaWYgKCFbZW50aXR5W2tdXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlcXVpcmVkIHN5c3RlbSBwcm9wICR7a30gbm90IGZvdW5kIGluIGVudGl0eSAke0pTT04uc3RyaW5naWZ5KGVudGl0eSl9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgZGVzdHJveUVudGl0eSA9IChjZXMsIGUpID0+IHtcbiAgLy8gVE9ETzogdGhpcyBtYXkgbmVlZCB0byBiZSBhIFwic2NoZWR1bGVEZXN0cm95RW50aXR5XCJcbiAgZS50YWdzLmZvckVhY2godCA9PiB7XG4gICAgY29uc3QgdGFnZ2VkID0gY2VzLmtub3duVGFnc1t0XTtcbiAgICBjb25zdCBpZHggPSB0YWdnZWQuaW5kZXhPZihlKTtcbiAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuO1xuICAgIHRhZ2dlZC5zcGxpY2UoaWR4LCAxKTtcbiAgfSk7XG4gIGUudGFncy5sZW5ndGggPSAwO1xuICBlLmRlc3Ryb3llZCA9IHRydWU7XG59XG5cbmNvbnN0IHJlc2V0ID0gKGNlcykgPT4ge1xuICBPYmplY3Qua2V5cyhjZXMua25vd25UYWdzKS5mb3JFYWNoKHQgPT4ge1xuICAgIGNvbnN0IGVudGl0aWVzID0gY2VzLmtub3duVGFnc1t0XTtcbiAgICBlbnRpdGllcy5mb3JFYWNoKGRlc3Ryb3lFbnRpdHkpO1xuICAgIGNlcy5rbm93blRhZ3MubGVuZ3RoID0gMDtcbiAgICBkZWxldGUgY2VzLmtub3duVGFnc1t0XTtcbiAgfSk7XG5cbiAgY2VzLkxBU1RfRV9JRCA9IDA7XG59XG4iLCJsZXQgTEFTVF9JRCA9IDA7XG5sZXQgdGFza3MgPSBbXTtcblxuZXhwb3J0IGNvbnN0IHNjaGVkdWxlID0gKGFjdGlvbiwgZGVsYXkpID0+IHtcbiAgdGFza3MucHVzaCh7XG4gICAgaWQ6ICsrTEFTVF9JRCxcbiAgICBhY3Rpb24sXG4gICAgZGVsYXksXG4gICAgYWdlOiAwLFxuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IHVuc2NoZWR1bGUgPSAoaWQpID0+IHtcbiAgY29uc3QgaWR4ID0gdGFza3MuZmluZEluZGV4KHQgPT4gdC5pZCA9PT0gaWQpO1xuICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuO1xuICB0YXNrcy5zcGxpY2UoaWR4LCAxKTtcbn1cblxuZXhwb3J0IGNvbnN0IHRpY2sgPSAoZHQgPSAxKSA9PiB7XG4gIC8vIGNvcHkgdGhlIGFycmF5IGluIGNhc2Ugc29tZSB0YXNrcyBuZWVkIHRvIGJlIGV4cHVuZ2VkLlxuICB0YXNrcy5zbGljZSgpLmZvckVhY2goKHQsIGlkeCkgPT4ge1xuICAgIHQuYWdlICs9IGR0O1xuXG4gICAgaWYgKHQuYWdlID49IHQuZGVsYXkpIHtcbiAgICAgIHRhc2tzLnNwbGljZShpZHgsIDEpO1xuICAgICAgdC5hY3Rpb24odC5kZWxheSwgdC5hZ2UpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCByZXNldCA9ICgpID0+IHtcbiAgTEFTVF9JRCA9IDA7XG4gIHRhc2tzLmxlbmd0aCA9IDA7XG59XG4iLCIvLyBUaGlzIGlzIGJhc2ljYWxseSBhbiBhZGFwdGF0aW9uIG9mXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSWNlQ3JlYW1Zb3UvTWFpbkxvb3AuanMvYmxvYi9naC1wYWdlcy9zcmMvbWFpbmxvb3AuanMsXG4vLyB3aXRoIHNvbWUgcmVtb3ZhbHMgLyBzaHJpbmtpbmcuXG5cbi8vIFdpdGhvdXQgYSBzdGFibGUgZ2FtZSBsb29wLCB0aGUgZ2FtZSB3aWxsIHJ1biBxdWl0ZSBkaWZmZXJlbnRseSBvbiBvbGRlclxuLy8gY29tcHV0ZXJzIG9yIGJyb3dzZXJzLiBJbiBvbmUgaXQgbWlnaHQgYmUgd2F5IGVhc2llciwgc2luY2UgaXQgY291bGQgcnVuXG4vLyBtdWNoIHNsb3dlciEgVGhpcyBoZWxwcyB0byBwcmV2ZW50IHRoYXQuXG5cbmV4cG9ydCBkZWZhdWx0ICh7XG4gIGRyYXdUaW1lLFxuICB1cGRhdGVUaW1lLFxuICBkcmF3LFxuICB1cGRhdGUsXG4gIHBhbmljQXQgPSAxMCxcbiAgb25QYW5pYyA9ICgpID0+IHt9LFxuICBvbkZQUyA9ICgpID0+IHt9LFxufSkgPT4ge1xuXG4gIGNvbnN0IHBlcmYgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG5cbiAgY29uc3QgZHJhd01zID0gZHJhd1RpbWU7XG4gIGNvbnN0IHVwZGF0ZU1zID0gdXBkYXRlVGltZTtcbiAgY29uc3QgcG5vdyA9IHBlcmYubm93LmJpbmQocGVyZik7XG4gIGNvbnN0IHJBRiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG5cbiAgbGV0IGFjY3VtdWxhdG9yID0gMDtcbiAgbGV0IHJhZiA9IG51bGw7XG4gIGxldCBsYXN0TG9vcCA9IHBub3coKTtcbiAgbGV0IGxhc3RGUFMgPSBwbm93KCk7XG4gIGxldCBmcmFtZXNUaGlzU2Vjb25kID0gMDtcbiAgbGV0IGZwcyA9IDA7XG5cbiAgKGZ1bmN0aW9uIGFjY3VtdWxhdGUgKG5vdykge1xuICAgIHJhZiA9IHJBRihhY2N1bXVsYXRlKTtcblxuICAgIGNvbnN0IGR0ID0gbm93IC0gbGFzdExvb3A7XG4gICAgYWNjdW11bGF0b3IgKz0gZHQ7XG4gICAgbGFzdExvb3AgPSBub3c7XG5cbiAgICBsZXQgc2hvdWxkRHJhdyA9IGFjY3VtdWxhdG9yIC0gZHJhd01zID49IDA7XG4gICAgbGV0IHN0ZXAgPSBNYXRoLmZsb29yKGFjY3VtdWxhdG9yIC8gdXBkYXRlTXMpO1xuXG4gICAgaWYgKHN0ZXAgPj0gcGFuaWNBdCkge1xuICAgICAgYWNjdW11bGF0b3IgPSAwO1xuICAgICAgbGFzdExvb3AgPSBwbm93KCk7XG4gICAgICBvblBhbmljKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2hpbGUgKHN0ZXAtLSA+IDApIHtcbiAgICAgIGFjY3VtdWxhdG9yIC09IHVwZGF0ZU1zO1xuICAgICAgdXBkYXRlKHVwZGF0ZU1zKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkRHJhdykge1xuICAgICAgLy8gcGFzcyBpbnRlcnBvbGF0aW9uIGZhY3RvciBmb3Igc21vb3RoIGFuaW1hdGlvbnNcbiAgICAgIGRyYXcoYWNjdW11bGF0b3IgLyBkcmF3TXMpO1xuICAgIH1cblxuICAgIGZyYW1lc1RoaXNTZWNvbmQgKz0gMTtcblxuICAgIGlmIChsYXN0RlBTICsgMTAwMCA8PSBub3cpIHtcbiAgICAgIGZwcyA9IDAuMjUgKiBmcmFtZXNUaGlzU2Vjb25kICsgMC43NSAqIGZwcztcbiAgICAgIGZyYW1lc1RoaXNTZWNvbmQgPSAwO1xuICAgICAgbGFzdEZQUyA9IG5vdztcbiAgICAgIG9uRlBTKGZwcyk7XG4gICAgfVxuXG4gIH0ocG5vdygpKSk7XG5cbiAgY29uc3Qgc3RvcCA9ICgpID0+IHtcbiAgICBpZiAocmFmKSBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdG9wLFxuICB9XG59XG4iLCJmdW5jdGlvbiB2Mih4LCB5KSB7XG4gIHJldHVybiB7IHg6IHggfHwgMCwgeTogeSB8fCAwIH1cbn1cblxudjIuY29weSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICBvdXQueCA9IGEueDtcbiAgb3V0LnkgPSBhLnk7XG4gIHJldHVybiBvdXQ7XG59XG5cbnYyLnNldCA9IGZ1bmN0aW9uKG91dCwgeCwgeSkge1xuICBvdXQueCA9IHg7XG4gIG91dC55ID0geTtcbiAgcmV0dXJuIG91dDtcbn1cblxudjIuYWRkID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gIG91dC54ID0gYS54ICsgYi54O1xuICBvdXQueSA9IGEueSArIGIueTtcbiAgcmV0dXJuIG91dDtcbn1cblxudjIuc3ViID0gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gIG91dC54ID0gYS54IC0gYi54O1xuICBvdXQueSA9IGEueSAtIGIueTtcbiAgcmV0dXJuIG91dDtcbn1cblxudjIuc2NhbGUgPSBmdW5jdGlvbihvdXQsIGEsIGZhY3Rvcikge1xuICBvdXQueCA9IGEueCAqIGZhY3RvcjtcbiAgb3V0LnkgPSBhLnkgKiBmYWN0b3I7XG4gIHJldHVybiBvdXQ7XG59XG5cbnYyLmRpc3RhbmNlID0gZnVuY3Rpb24odjEsIHYyKSB7XG4gIHZhciB4ID0gdjEueCAtIHYyLng7XG4gIHZhciB5ID0gdjEueSAtIHYyLnk7XG4gIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcbn1cblxudjIuZGlzdGFuY2UyID0gZnVuY3Rpb24odjEsIHYyKSB7XG4gIHZhciB4ID0gdjEueCAtIHYyLng7XG4gIHZhciB5ID0gdjEueSAtIHYyLnk7XG4gIHJldHVybiB4KnggKyB5Knk7XG59XG5cbnYyLm1hZ25pdHVkZSA9IGZ1bmN0aW9uKHYxKSB7XG4gIHZhciB4ID0gdjEueDtcbiAgdmFyIHkgPSB2MS55O1xuICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSk7XG59XG5cbnYyLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKG91dCwgYSkge1xuICB2YXIgeCA9IGEueDtcbiAgdmFyIHkgPSBhLnk7XG4gIHZhciBsZW4gPSB4KnggKyB5Knk7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIG91dC54ID0gYS54ICogbGVuO1xuICAgIG91dC55ID0gYS55ICogbGVuO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjI7XG4iLCJ2YXIgdjIgPSByZXF1aXJlKCcuL3YyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY21wLCBkdCkge1xuICAvLyBhcHBseSBhY2NlbGVyYXRpb24gdG8gY3VycmVudCBwb3NpdGlvbiwgY29udmVydCBkdCB0byBzZWNvbmRzXG4gIGNtcC5jcG9zLnggKz0gY21wLmFjZWwueCAqIGR0ICogZHQgKiAwLjAwMTtcbiAgY21wLmNwb3MueSArPSBjbXAuYWNlbC55ICogZHQgKiBkdCAqIDAuMDAxO1xuXG4gIC8vIHJlc2V0IGFjY2VsZXJhdGlvblxuICB2Mi5zZXQoY21wLmFjZWwsIDAsIDApO1xufSIsInZhciB2MiA9IHJlcXVpcmUoJy4vdjInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjbXApIHtcbiAgdmFyIHggPSBjbXAuY3Bvcy54KjIgLSBjbXAucHBvcy54XG4gICAgLCB5ID0gY21wLmNwb3MueSoyIC0gY21wLnBwb3MueTtcblxuICB2Mi5zZXQoY21wLnBwb3MsIGNtcC5jcG9zLngsIGNtcC5jcG9zLnkpO1xuICB2Mi5zZXQoY21wLmNwb3MsIHgsIHkpO1xufSIsImltcG9ydCB7XG4gIGRlZmF1bHQgYXMgQ2VzLFxuICBzeXN0ZW1Qcm9wUmVxc1xufSBmcm9tICcuL2xpYi9jZXMnO1xuaW1wb3J0IHtcbiAgc2NoZWR1bGUsXG4gIHRpY2ssXG59IGZyb20gJy4vbGliL3RpbWUnO1xuaW1wb3J0IExvb3AgZnJvbSAnLi9saWIvbG9vcCc7XG5cbmltcG9ydCBhY2NlbGVyYXRlIGZyb20gJ3BvY2tldC1waHlzaWNzL2FjY2VsZXJhdGUyZCc7XG5pbXBvcnQgaW5lcnRpYSBmcm9tICdwb2NrZXQtcGh5c2ljcy9pbmVydGlhMmQnO1xuXG5jb25zdCBjZXMgPSBuZXcgQ2VzKCk7XG5jb25zdCB7XG4gIG5ld0VudGl0eTogRW50aXR5LFxuICBuZXdTeXN0ZW06IFN5c3RlbSxcbiAgZGVzdHJveUVudGl0eSxcbn0gPSBjZXM7XG5cbi8vIFRoaXMgaXMgYW4gXCJlbnRpdHlcIiwgYWthIGEgYmFnIG9mIGRhdGEsIHdpdGggYSBzcGVjaWFsIGFycmF5IG5hbWVkIGB0YWdzYC5cbi8vIFRoZXNlIHRhZ3MgbWFyayBhbiBlbnRpdHkgYXMgcHJvY2Vzc2FibGUgYnkgYSBzeXN0ZW0gdGhhdCBoYXMgbWF0Y2hpbmcgdGFncy5cbi8vIFRoZSBzeXN0ZW0gd2lsbCBvbmx5IGludm9rZSBpdHMgcm91dGluZSBpZiBhbiBlbnRpdHkgb3IgZW50aXRpZXMgaGFzIGV2ZXJ5XG4vLyB0YWcgdGhlIHN5c3RlbSByZXF1aXJlcy5cbmNvbnN0IGUxID0gRW50aXR5KHtcbiAgdGFnczogWydwaHlzLW5vLWNvbCcsICdkcmF3LWNvbnNvbGUnXSxcbiAgY3BvczogeyB4OiAwLCB5OiAwIH0sXG4gIHBwb3M6IHsgeDogMCwgeTogMCB9LFxuICBhY2VsOiB7IHg6IDEwLCB5OiAwIH0sXG59KTtcblxuY29uc3QgcGh5c2ljc1N5c3RlbSA9IFN5c3RlbSgoZW50aXRpZXMsIGR0KSA9PiB7XG4gIC8vIGVudGl0aWVzIGlzIHBhc3NlZCBpbiBhdCBjYWxsIHRpbWUgZnJvbSB3aXRoaW4uXG4gIC8vIGR0IGNvbWVzIGZyb20gY2FsbGluZyB0aGUgc3lzdGVtIG1hbnVhbGx5IGJlbG93LlxuICBlbnRpdGllcy5mb3JFYWNoKGUgPT4ge1xuICAgIC8vIHRoaXMgd2lsbCBiZSByZW1vdmVkIGR1cmluZyB0aGUgYnVpbGQgZHVlIHRvIGRlYWQtY29kZSBlbGltaW5hdGlvbi5cbiAgICAvLyBIYXZpbmcgdGhpcyBjaGVjayB3aWxsIGhvcGVmdWxseSBwcmV2ZW50IHR5cG9zIGR1cmluZyBkZXY/XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsgc3lzdGVtUHJvcFJlcXMoZSwgJ2Nwb3MnLCAncHBvcycsICdhY2VsJyk7IH1cbiAgICBhY2NlbGVyYXRlKGUsIGR0KTtcbiAgICBpbmVydGlhKGUpO1xuICB9KVxufSwgJ3BoeXMtbm8tY29sJyk7XG5cbi8vIHRoaXMgc2hvdWxkIGJlIG1hZGUgbW9yZSBzcGVjaWZpYywgc3VjaCBhcyBcImNpcmNsZURyYXdcIiBvciBcInBhcnRpY2xlRHJhd1wiIGFuZCBzaG91bGRcbi8vIHJlY2VpdmUgc29tZSBzb3J0IG9mIGRyYXdpbmcgY29udGV4dCBhcyBwYXJhbS5cbmNvbnN0IGRyYXdTeXN0ZW0gPSBTeXN0ZW0oKGVudGl0aWVzLCBpbnRlcnApID0+IHtcbiAgLy8gZW50aXRpZXMgaXMgcGFzc2VkIGluIGF0IGNhbGwgdGltZSBmcm9tIHdpdGhpbi5cbiAgLy8gaW50ZXJwIGNvbWVzIGZyb20gbWFudWFsbHkgY2FsbGluZyB0aGUgc3lzdGVtIGJlbG93LlxuICBlbnRpdGllcy5mb3JFYWNoKGUgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7IHN5c3RlbVByb3BSZXFzKGUsICdjcG9zJywgJ3Bwb3MnKTsgfVxuICAgIGNvbnNvbGUubG9nKCd4JywgZS5wcG9zLnggKyAoZS5jcG9zLnggLSBlLnBwb3MueCkgKiBpbnRlcnApO1xuICAgIGNvbnNvbGUubG9nKCd5JywgZS5wcG9zLnkgKyAoZS5jcG9zLnkgLSBlLnBwb3MueSkgKiBpbnRlcnApO1xuICB9KVxufSwgJ2RyYXctY29uc29sZScpO1xuXG5cbi8vIHNjaGVkdWxlIGEgY2FsbGJhY2sgZm9yIGEgc3BlY2lmaWVkIFwiYmVzdCBlZmZvcnRcIiB0aW1lIGluIHRoZSBmdXR1cmUuXG5zY2hlZHVsZSgoc2NoZWR1bGVkRGVsYXksIGFjdHVhbERlbGF5KSA9PiB7XG4gIC8vIGRlc3Ryb3kgdGhlIGVudGl0eSBhZnRlciAzNTAwIG1zXG4gIC8vIFRPRE86IG1heSBuZWVkIGEgXCJkZXN0cm95RW50aXR5WFN5c3RlbVwiIHRoYXQgZGVhbGxvY3MgYW55IHByb3BzIG9uIHRoZVxuICAvLyBlbnRpdHkuXG4gIGRlc3Ryb3lFbnRpdHkoZTEpO1xuICBjb25zb2xlLmxvZyhlMSk7XG59LCAzNTAwKTtcblxuY29uc3QgeyBzdG9wIH0gPSBMb29wKHtcbiAgZHJhd1RpbWU6IDEwMDAgLyA2MCxcbiAgdXBkYXRlVGltZTogMTAwMCAvIDMwLFxuICB1cGRhdGU6IChkdCkgPT4ge1xuICAgIHRpY2soZHQpO1xuICAgIHBoeXNpY3NTeXN0ZW0oZHQpO1xuICB9LFxuICBkcmF3OiAoaW50ZXJwKSA9PiB7XG4gICAgZHJhd1N5c3RlbShpbnRlcnApO1xuICB9LFxuICBvblBhbmljOiAoKSA9PiBjb25zb2xlLmxvZygncGFuaWMhJyksXG4gIG9uRlBTOiAoZnBzKSA9PiBjb25zb2xlLmxvZyhmcHMsICdmcHMnKSxcbn0pO1xuXG4vLyBUdXJuIHRoaXMgaW50byBkZWFkLWNvZGUgZHVyaW5nIHByb2R1Y3Rpb25cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG4gICAgaWYgKGUud2hpY2ggPT09IDI3KSB7XG4gICAgICBzdG9wKCk7XG4gICAgICBjb25zb2xlLmxvZygnSEFMVCBJTiBUSEUgTkFNRSBPRiBTQ0lFTkNFJyk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59XG4iXSwibmFtZXMiOlsiQ2VzIiwiY2VzIiwia25vd25UYWdzIiwiTEFTVF9FX0lEIiwibmV3RW50aXR5IiwicHJvcHMiLCJFbnRpdHkiLCJkZXN0cm95RW50aXR5IiwiZW50aXR5IiwicmVzZXQiLCJuZXdTeXN0ZW0iLCJhY3Rpb24iLCJ0YWdzIiwiU3lzdGVtIiwiZSIsImlkIiwiZm9yRWFjaCIsInAiLCJwdXNoIiwiYXJncyIsImVudGl0aWVzIiwicmVkdWNlIiwiZm91bmRzIiwidCIsInRhZ2dlZCIsImV2ZXJ5IiwiaW5kZXhPZiIsInN0YWciLCJPYmplY3QiLCJrZXlzIiwibWFwIiwic3lzdGVtUHJvcFJlcXMiLCJwcm9jZXNzIiwiayIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImlkeCIsInNwbGljZSIsImxlbmd0aCIsImRlc3Ryb3llZCIsIkxBU1RfSUQiLCJ0YXNrcyIsInNjaGVkdWxlIiwiZGVsYXkiLCJhZ2UiLCJ0aWNrIiwiZHQiLCJzbGljZSIsImRyYXdUaW1lIiwidXBkYXRlVGltZSIsImRyYXciLCJ1cGRhdGUiLCJwYW5pY0F0Iiwib25QYW5pYyIsIm9uRlBTIiwicGVyZiIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwiZHJhd01zIiwidXBkYXRlTXMiLCJwbm93Iiwibm93IiwiYmluZCIsInJBRiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFjY3VtdWxhdG9yIiwicmFmIiwibGFzdExvb3AiLCJsYXN0RlBTIiwiZnJhbWVzVGhpc1NlY29uZCIsImZwcyIsImFjY3VtdWxhdGUiLCJzaG91bGREcmF3Iiwic3RlcCIsIk1hdGgiLCJmbG9vciIsInN0b3AiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInYyIiwieCIsInkiLCJjb3B5Iiwib3V0IiwiYSIsInNldCIsImFkZCIsImIiLCJzdWIiLCJzY2FsZSIsImZhY3RvciIsImRpc3RhbmNlIiwidjEiLCJzcXJ0IiwiZGlzdGFuY2UyIiwibWFnbml0dWRlIiwibm9ybWFsaXplIiwibGVuIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJjbXAiLCJjcG9zIiwiYWNlbCIsInBwb3MiLCJlMSIsInBoeXNpY3NTeXN0ZW0iLCJhY2NlbGVyYXRlIiwiaW5lcnRpYSIsImRyYXdTeXN0ZW0iLCJpbnRlcnAiLCJjb25zb2xlIiwibG9nIiwic2NoZWR1bGVkRGVsYXkiLCJhY3R1YWxEZWxheSIsIkxvb3AiLCJhZGRFdmVudExpc3RlbmVyIiwid2hpY2giXSwibWFwcGluZ3MiOiI7OztDQUFlLFNBQVNBLEdBQVQsR0FBZ0I7QUFDN0IsQ0FBQSxNQUFNQyxNQUFNO0FBQ1ZDLENBQUFBLGVBQVcsRUFERDtBQUVWQyxDQUFBQSxlQUFXLENBRkQ7O0FBSVZDLENBQUFBLGVBQVcsbUJBQUNDLEtBQUQ7QUFBQSxDQUFBLGFBQVdDLFNBQU9MLEdBQVAsRUFBWUksS0FBWixDQUFYO0FBQUEsQ0FBQSxLQUpEO0FBS1ZFLENBQUFBLG1CQUFlLHVCQUFDQyxNQUFEO0FBQUEsQ0FBQSxhQUFZRCxlQUFjTixHQUFkLEVBQW1CTyxNQUFuQixDQUFaO0FBQUEsQ0FBQSxLQUxMO0FBTVZDLENBQUFBLFdBQU87QUFBQSxDQUFBLGFBQU1BLE9BQU1SLEdBQU4sQ0FBTjtBQUFBLENBQUEsS0FORzs7QUFRVlMsQ0FBQUEsZUFBVyxtQkFBQ0MsTUFBRDtBQUFBLENBQUEsd0NBQVlDLElBQVo7QUFBWUEsQ0FBQUEsWUFBWjtBQUFBLENBQUE7O0FBQUEsQ0FBQSxhQUFxQkMsMkJBQU9aLEdBQVAsRUFBWVUsTUFBWixTQUF1QkMsSUFB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